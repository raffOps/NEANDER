// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2018 21:54:37"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decod3x8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decod3x8_vlg_sample_tst(
	bit0,
	bit1,
	bit2,
	enable,
	sampler_tx
);
input  bit0;
input  bit1;
input  bit2;
input  enable;
output sampler_tx;

reg sample;
time current_time;
always @(bit0 or bit1 or bit2 or enable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decod3x8_vlg_check_tst (
	cinco,
	dois,
	quatro,
	seis,
	sete,
	tres,
	um,
	zero,
	sampler_rx
);
input  cinco;
input  dois;
input  quatro;
input  seis;
input  sete;
input  tres;
input  um;
input  zero;
input sampler_rx;

reg  cinco_expected;
reg  dois_expected;
reg  quatro_expected;
reg  seis_expected;
reg  sete_expected;
reg  tres_expected;
reg  um_expected;
reg  zero_expected;

reg  cinco_prev;
reg  dois_prev;
reg  quatro_prev;
reg  seis_prev;
reg  sete_prev;
reg  tres_prev;
reg  um_prev;
reg  zero_prev;

reg  cinco_expected_prev;
reg  dois_expected_prev;
reg  quatro_expected_prev;
reg  seis_expected_prev;
reg  sete_expected_prev;
reg  tres_expected_prev;
reg  um_expected_prev;
reg  zero_expected_prev;

reg  last_cinco_exp;
reg  last_dois_exp;
reg  last_quatro_exp;
reg  last_seis_exp;
reg  last_sete_exp;
reg  last_tres_exp;
reg  last_um_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	cinco_prev = cinco;
	dois_prev = dois;
	quatro_prev = quatro;
	seis_prev = seis;
	sete_prev = sete;
	tres_prev = tres;
	um_prev = um;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	cinco_expected_prev = cinco_expected;
	dois_expected_prev = dois_expected;
	quatro_expected_prev = quatro_expected;
	seis_expected_prev = seis_expected;
	sete_expected_prev = sete_expected;
	tres_expected_prev = tres_expected;
	um_expected_prev = um_expected;
	zero_expected_prev = zero_expected;
end



// expected zero
initial
begin
	zero_expected = 1'bX;
end 

// expected um
initial
begin
	um_expected = 1'bX;
end 

// expected dois
initial
begin
	dois_expected = 1'bX;
end 

// expected tres
initial
begin
	tres_expected = 1'bX;
end 

// expected quatro
initial
begin
	quatro_expected = 1'bX;
end 

// expected cinco
initial
begin
	cinco_expected = 1'bX;
end 

// expected seis
initial
begin
	seis_expected = 1'bX;
end 

// expected sete
initial
begin
	sete_expected = 1'bX;
end 
// generate trigger
always @(cinco_expected or cinco or dois_expected or dois or quatro_expected or quatro or seis_expected or seis or sete_expected or sete or tres_expected or tres or um_expected or um or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cinco = %b | expected dois = %b | expected quatro = %b | expected seis = %b | expected sete = %b | expected tres = %b | expected um = %b | expected zero = %b | ",cinco_expected_prev,dois_expected_prev,quatro_expected_prev,seis_expected_prev,sete_expected_prev,tres_expected_prev,um_expected_prev,zero_expected_prev);
	$display("| real cinco = %b | real dois = %b | real quatro = %b | real seis = %b | real sete = %b | real tres = %b | real um = %b | real zero = %b | ",cinco_prev,dois_prev,quatro_prev,seis_prev,sete_prev,tres_prev,um_prev,zero_prev);
`endif
	if (
		( cinco_expected_prev !== 1'bx ) && ( cinco_prev !== cinco_expected_prev )
		&& ((cinco_expected_prev !== last_cinco_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cinco :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cinco_expected_prev);
		$display ("     Real value = %b", cinco_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cinco_exp = cinco_expected_prev;
	end
	if (
		( dois_expected_prev !== 1'bx ) && ( dois_prev !== dois_expected_prev )
		&& ((dois_expected_prev !== last_dois_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dois :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dois_expected_prev);
		$display ("     Real value = %b", dois_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dois_exp = dois_expected_prev;
	end
	if (
		( quatro_expected_prev !== 1'bx ) && ( quatro_prev !== quatro_expected_prev )
		&& ((quatro_expected_prev !== last_quatro_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quatro :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quatro_expected_prev);
		$display ("     Real value = %b", quatro_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_quatro_exp = quatro_expected_prev;
	end
	if (
		( seis_expected_prev !== 1'bx ) && ( seis_prev !== seis_expected_prev )
		&& ((seis_expected_prev !== last_seis_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seis :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seis_expected_prev);
		$display ("     Real value = %b", seis_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seis_exp = seis_expected_prev;
	end
	if (
		( sete_expected_prev !== 1'bx ) && ( sete_prev !== sete_expected_prev )
		&& ((sete_expected_prev !== last_sete_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sete :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sete_expected_prev);
		$display ("     Real value = %b", sete_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_sete_exp = sete_expected_prev;
	end
	if (
		( tres_expected_prev !== 1'bx ) && ( tres_prev !== tres_expected_prev )
		&& ((tres_expected_prev !== last_tres_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tres :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tres_expected_prev);
		$display ("     Real value = %b", tres_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_tres_exp = tres_expected_prev;
	end
	if (
		( um_expected_prev !== 1'bx ) && ( um_prev !== um_expected_prev )
		&& ((um_expected_prev !== last_um_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port um :: @time = %t",  $realtime);
		$display ("     Expected value = %b", um_expected_prev);
		$display ("     Real value = %b", um_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_um_exp = um_expected_prev;
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decod3x8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bit0;
reg bit1;
reg bit2;
reg enable;
// wires                                               
wire cinco;
wire dois;
wire quatro;
wire seis;
wire sete;
wire tres;
wire um;
wire zero;

wire sampler;                             

// assign statements (if any)                          
decod3x8 i1 (
// port map - connection between master ports and signals/registers   
	.bit0(bit0),
	.bit1(bit1),
	.bit2(bit2),
	.cinco(cinco),
	.dois(dois),
	.enable(enable),
	.quatro(quatro),
	.seis(seis),
	.sete(sete),
	.tres(tres),
	.um(um),
	.zero(zero)
);

// bit0
initial
begin
	repeat(16)
	begin
		bit0 = 1'b0;
		bit0 = #30000 1'b1;
		# 30000;
	end
	bit0 = 1'b0;
	bit0 = #30000 1'b1;
end 

// bit1
initial
begin
	repeat(8)
	begin
		bit1 = 1'b0;
		bit1 = #60000 1'b1;
		# 60000;
	end
	bit1 = 1'b0;
end 

// bit2
initial
begin
	repeat(4)
	begin
		bit2 = 1'b0;
		bit2 = #120000 1'b1;
		# 120000;
	end
	bit2 = 1'b0;
end 

// enable
initial
begin
	enable = 1'b1;
end 

decod3x8_vlg_sample_tst tb_sample (
	.bit0(bit0),
	.bit1(bit1),
	.bit2(bit2),
	.enable(enable),
	.sampler_tx(sampler)
);

decod3x8_vlg_check_tst tb_out(
	.cinco(cinco),
	.dois(dois),
	.quatro(quatro),
	.seis(seis),
	.sete(sete),
	.tres(tres),
	.um(um),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

