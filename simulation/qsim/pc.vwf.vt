// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2018 23:10:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pc_vlg_sample_tst(
	clk,
	load,
	rst,
	s,
	sampler_tx
);
input  clk;
input [7:0] load;
input  rst;
input [1:0] s;
output sampler_tx;

reg sample;
time current_time;
always @(clk or load or rst or s)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pc_vlg_check_tst (
	q,
	sAND5,
	sOR5,
	sampler_rx
);
input [7:0] q;
input  sAND5;
input  sOR5;
input sampler_rx;

reg [7:0] q_expected;
reg  sAND5_expected;
reg  sOR5_expected;

reg [7:0] q_prev;
reg  sAND5_prev;
reg  sOR5_prev;

reg [7:0] q_expected_prev;
reg  sAND5_expected_prev;
reg  sOR5_expected_prev;

reg [7:0] last_q_exp;
reg  last_sAND5_exp;
reg  last_sOR5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	q_prev = q;
	sAND5_prev = sAND5;
	sOR5_prev = sOR5;
end

// update expected /o prevs

always @(trigger)
begin
	q_expected_prev = q_expected;
	sAND5_expected_prev = sAND5_expected;
	sOR5_expected_prev = sOR5_expected;
end


// expected q[ 7 ]
initial
begin
	q_expected[7] = 1'b0;
end 
// expected q[ 6 ]
initial
begin
	q_expected[6] = 1'b0;
end 
// expected q[ 5 ]
initial
begin
	q_expected[5] = 1'b0;
end 
// expected q[ 4 ]
initial
begin
	q_expected[4] = 1'b0;
end 
// expected q[ 3 ]
initial
begin
	q_expected[3] = 1'b0;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'b0;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'b0;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'b0;
end 

// expected sAND5
initial
begin
	sAND5_expected = 1'bX;
	sAND5_expected = #350000 1'b0;
	sAND5_expected = #500000 1'b1;
	sAND5_expected = #140000 1'bX;
end 

// expected sOR5
initial
begin
	sOR5_expected = 1'bX;
	sOR5_expected = #350000 1'b1;
	sOR5_expected = #290000 1'bX;
end 
// generate trigger
always @(q_expected or q or sAND5_expected or sAND5 or sOR5_expected or sOR5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected q = %b | expected sAND5 = %b | expected sOR5 = %b | ",q_expected_prev,sAND5_expected_prev,sOR5_expected_prev);
	$display("| real q = %b | real sAND5 = %b | real sOR5 = %b | ",q_prev,sAND5_prev,sOR5_prev);
`endif
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( q_expected_prev[3] !== 1'bx ) && ( q_prev[3] !== q_expected_prev[3] )
		&& ((q_expected_prev[3] !== last_q_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[3] = q_expected_prev[3];
	end
	if (
		( q_expected_prev[4] !== 1'bx ) && ( q_prev[4] !== q_expected_prev[4] )
		&& ((q_expected_prev[4] !== last_q_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[4] = q_expected_prev[4];
	end
	if (
		( q_expected_prev[5] !== 1'bx ) && ( q_prev[5] !== q_expected_prev[5] )
		&& ((q_expected_prev[5] !== last_q_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[5] = q_expected_prev[5];
	end
	if (
		( q_expected_prev[6] !== 1'bx ) && ( q_prev[6] !== q_expected_prev[6] )
		&& ((q_expected_prev[6] !== last_q_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[6] = q_expected_prev[6];
	end
	if (
		( q_expected_prev[7] !== 1'bx ) && ( q_prev[7] !== q_expected_prev[7] )
		&& ((q_expected_prev[7] !== last_q_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_q_exp[7] = q_expected_prev[7];
	end
	if (
		( sAND5_expected_prev !== 1'bx ) && ( sAND5_prev !== sAND5_expected_prev )
		&& ((sAND5_expected_prev !== last_sAND5_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sAND5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sAND5_expected_prev);
		$display ("     Real value = %b", sAND5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sAND5_exp = sAND5_expected_prev;
	end
	if (
		( sOR5_expected_prev !== 1'bx ) && ( sOR5_prev !== sOR5_expected_prev )
		&& ((sOR5_expected_prev !== last_sOR5_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sOR5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sOR5_expected_prev);
		$display ("     Real value = %b", sOR5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sOR5_exp = sOR5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] load;
reg rst;
reg [1:0] s;
// wires                                               
wire [7:0] q;
wire sAND5;
wire sOR5;

wire sampler;                             

// assign statements (if any)                          
pc i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.load(load),
	.q(q),
	.rst(rst),
	.s(s),
	.sAND5(sAND5),
	.sOR5(sOR5)
);

// clk
initial
begin
	clk = 1'b1;
	# 10000;
	repeat(49)
	begin
		clk = 1'b0;
		clk = #10000 1'b1;
		# 10000;
	end
	clk = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #50000 1'b1;
end 
// load[ 7 ]
initial
begin
	load[7] = 1'b1;
	load[7] = #80000 1'b0;
	load[7] = #40000 1'b1;
	load[7] = #40000 1'b0;
	load[7] = #80000 1'b1;
	load[7] = #320000 1'b0;
	load[7] = #40000 1'b1;
	load[7] = #120000 1'b0;
	load[7] = #40000 1'b1;
	load[7] = #120000 1'b0;
	load[7] = #40000 1'b1;
	load[7] = #40000 1'b0;
end 
// load[ 6 ]
initial
begin
	load[6] = 1'b0;
	load[6] = #40000 1'b1;
	load[6] = #80000 1'b0;
	load[6] = #80000 1'b1;
	load[6] = #40000 1'b0;
	load[6] = #80000 1'b1;
	load[6] = #40000 1'b0;
	load[6] = #80000 1'b1;
	load[6] = #40000 1'b0;
	load[6] = #40000 1'b1;
	load[6] = #160000 1'b0;
	load[6] = #40000 1'b1;
	load[6] = #40000 1'b0;
	load[6] = #120000 1'b1;
	load[6] = #40000 1'b0;
	load[6] = #40000 1'b1;
end 
// load[ 5 ]
initial
begin
	load[5] = 1'b0;
	load[5] = #120000 1'b1;
	load[5] = #40000 1'b0;
	load[5] = #40000 1'b1;
	load[5] = #80000 1'b0;
	load[5] = #40000 1'b1;
	load[5] = #80000 1'b0;
	load[5] = #40000 1'b1;
	load[5] = #40000 1'b0;
	load[5] = #160000 1'b1;
	load[5] = #40000 1'b0;
	load[5] = #120000 1'b1;
	load[5] = #40000 1'b0;
end 
// load[ 4 ]
initial
begin
	load[4] = 1'b1;
	load[4] = #40000 1'b0;
	load[4] = #40000 1'b1;
	load[4] = #80000 1'b0;
	load[4] = #40000 1'b1;
	load[4] = #200000 1'b0;
	load[4] = #40000 1'b1;
	load[4] = #40000 1'b0;
	load[4] = #120000 1'b1;
	load[4] = #80000 1'b0;
	load[4] = #80000 1'b1;
	load[4] = #40000 1'b0;
	load[4] = #40000 1'b1;
	load[4] = #40000 1'b0;
	load[4] = #40000 1'b1;
end 
// load[ 3 ]
initial
begin
	load[3] = 1'b1;
	load[3] = #80000 1'b0;
	load[3] = #120000 1'b1;
	load[3] = #200000 1'b0;
	load[3] = #120000 1'b1;
	load[3] = #40000 1'b0;
	load[3] = #80000 1'b1;
	load[3] = #40000 1'b0;
	load[3] = #160000 1'b1;
	load[3] = #120000 1'b0;
end 
// load[ 2 ]
initial
begin
	load[2] = 1'b0;
	load[2] = #40000 1'b1;
	load[2] = #120000 1'b0;
	load[2] = #40000 1'b1;
	load[2] = #80000 1'b0;
	load[2] = #200000 1'b1;
	load[2] = #80000 1'b0;
	load[2] = #80000 1'b1;
	load[2] = #80000 1'b0;
	load[2] = #80000 1'b1;
	load[2] = #120000 1'b0;
	load[2] = #40000 1'b1;
end 
// load[ 1 ]
initial
begin
	load[1] = 1'b0;
	load[1] = #40000 1'b1;
	load[1] = #80000 1'b0;
	load[1] = #80000 1'b1;
	load[1] = #200000 1'b0;
	load[1] = #40000 1'b1;
	load[1] = #40000 1'b0;
	load[1] = #80000 1'b1;
	load[1] = #40000 1'b0;
	load[1] = #80000 1'b1;
	load[1] = #80000 1'b0;
	load[1] = #120000 1'b1;
	load[1] = #40000 1'b0;
	load[1] = #40000 1'b1;
end 
// load[ 0 ]
initial
begin
	load[0] = 1'b0;
	load[0] = #40000 1'b1;
	load[0] = #40000 1'b0;
	load[0] = #40000 1'b1;
	load[0] = #40000 1'b0;
	load[0] = #120000 1'b1;
	load[0] = #40000 1'b0;
	load[0] = #40000 1'b1;
	load[0] = #40000 1'b0;
	load[0] = #40000 1'b1;
	load[0] = #160000 1'b0;
	load[0] = #40000 1'b1;
	load[0] = #40000 1'b0;
	load[0] = #160000 1'b1;
	load[0] = #40000 1'b0;
	load[0] = #40000 1'b1;
end 
// s[ 1 ]
initial
begin
	s[1] = 1'b0;
	s[1] = #430000 1'b1;
	s[1] = #200000 1'b0;
	s[1] = #220000 1'b1;
	s[1] = #140000 1'b0;
end 
// s[ 0 ]
initial
begin
	s[0] = 1'b1;
	s[0] = #430000 1'b0;
	s[0] = #420000 1'b1;
end 

pc_vlg_sample_tst tb_sample (
	.clk(clk),
	.load(load),
	.rst(rst),
	.s(s),
	.sampler_tx(sampler)
);

pc_vlg_check_tst tb_out(
	.q(q),
	.sAND5(sAND5),
	.sOR5(sOR5),
	.sampler_rx(sampler)
);
endmodule

